#ifndef ROCQUANTUM_QUANTUMDIALECT_H
#define ROCQUANTUM_QUANTUMDIALECT_H

#include "mlir/IR/Dialect.h"
#include "mlir/IR/OpDefinition.h"
#include "mlir/Interfaces/SideEffectInterfaces.h"
// Other MLIR includes will be necessary for more complex ops, types, interfaces.

namespace rocquantum {
namespace quantum {

// Forward declarations for Ops (will be defined using TableGen or C++ Op classes)
class AllocQubitOp;
class DeallocQubitOp;
class GenericGateOp;
class MeasureOp;
// Forward declaration for QubitType
class QubitType;

// --- Quantum Dialect Definition ---
class QuantumDialect : public mlir::Dialect {
public:
    explicit QuantumDialect(mlir::MLIRContext *ctx);

    // Unique namespace for this dialect
    static llvm::StringRef getDialectNamespace() { return "quantum"; }

    // Initialize the dialect, register ops and types
    void initialize() override;

    // Provide a hook for materializing custom constants.
    // mlir::Operation *materializeConstant(mlir::OpBuilder &builder, mlir::Attribute value,
    //                                    mlir::Type type, mlir::Location loc) override;

    // Register custom types
    mlir::Type parseType(mlir::DialectAsmParser &parser) const override;
    void printType(mlir::Type type, mlir::DialectAsmPrinter &printer) const override;

    // Add custom types to the dialect.
    void registerTypes();
};

// --- Custom Types ---

// Example: QubitType
// This would typically be defined in a separate QubitType.h/cpp or generated by TableGen
namespace detail {
struct QubitTypeStorage; // Opaque storage class for the type
} // namespace detail

class QubitType : public mlir::Type::TypeBase<QubitType, mlir::Type,
                                             detail::QubitTypeStorage> {
public:
    using Base::Base; // Inherit constructors

    static QubitType get(mlir::MLIRContext *context);
    static constexpr llvm::StringLiteral name = "quantum.qubit";
};


} // namespace quantum
} // namespace rocquantum

// Define the C++ Op classes (these would typically be in separate files or auto-generated by TableGen)
// For now, very basic declarations. Full definitions require more boilerplate.

#define GET_OP_CLASSES
#include "rocquantum/Dialect/QuantumOps.h.inc" // This file would be generated by TableGen

#endif // ROCQUANTUM_QUANTUMDIALECT_H
